generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  bio          String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts       Post[]
  reels       Reel[]
  stories     Story[]
  comments    Comment[]
  likes       Like[]
  followers   Follow[]          @relation("UserFollowers")
  following   Follow[]          @relation("UserFollowing")
  chats       ChatParticipant[]
  messages    Message[]
  StoryView   StoryView[]
  Share       Share[]
  MessageLike MessageLike[]

  // âœ… Blocking relations
  blocking  Block[] @relation("UserBlocking") // Users this user has blocked
  blockedBy Block[] @relation("UserBlocked") // Users who blocked this user
}

model Block {
  id        String   @id @default(uuid())
  blocker   User     @relation("UserBlocking", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id])
  blockedId String
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId]) // prevent duplicate blocks
}

model Post {
  id        String    @id @default(uuid())
  content   String?
  imageUrl  String?
  videoUrl  String?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
  shares    Share[]
}

model Reel {
  id        String    @id @default(uuid())
  videoUrl  String
  caption   String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
  shares    Share[]
}

model Story {
  id        String      @id @default(uuid())
  mediaUrl  String
  caption   String?
  createdAt DateTime    @default(now())
  expiresAt DateTime
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  viewers   StoryView[]
}

model StoryView {
  id       String   @id @default(uuid())
  story    Story    @relation(fields: [storyId], references: [id])
  storyId  String
  viewer   User     @relation(fields: [viewerId], references: [id])
  viewerId String
  viewedAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  reel      Reel?    @relation(fields: [reelId], references: [id])
  reelId    String?
}

model Like {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  reel   Reel?   @relation(fields: [reelId], references: [id])
  reelId String?

  @@unique([userId, postId]) // prevent duplicate likes
}

model Share {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  reel   Reel?   @relation(fields: [reelId], references: [id])
  reelId String?
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model Chat {
  id           String            @id @default(uuid())
  isGroup      Boolean           @default(false)
  name         String?
  createdAt    DateTime          @default(now())
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  joinedAt DateTime @default(now())
}

model Message {
  id        String        @id @default(uuid())
  content   String?
  imageUrl  String?
  videoUrl  String?
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat          @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime      @default(now())
  likedBy   MessageLike[]
}

model MessageLike {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}